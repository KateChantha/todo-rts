[{"/Users/Used/Documents/Practice-Projects/todo-_rts/src/index.tsx":"1","/Users/Used/Documents/Practice-Projects/todo-_rts/src/App.js":"2","/Users/Used/Documents/Practice-Projects/todo-_rts/src/components/Todo.js":"3","/Users/Used/Documents/Practice-Projects/todo-_rts/src/components/Form.js":"4","/Users/Used/Documents/Practice-Projects/todo-_rts/src/components/FilterButton.js":"5"},{"size":330,"mtime":1612903735479,"results":"6","hashOfConfig":"7"},{"size":2430,"mtime":1612922825328,"results":"8","hashOfConfig":"7"},{"size":2367,"mtime":1612923593286,"results":"9","hashOfConfig":"7"},{"size":930,"mtime":1612924183997,"results":"10","hashOfConfig":"7"},{"size":403,"mtime":1612922679755,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"j0odhf",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"/Users/Used/Documents/Practice-Projects/todo-_rts/src/index.tsx",[],["25","26"],"/Users/Used/Documents/Practice-Projects/todo-_rts/src/App.js",["27"],"import React, {useState} from 'react';\nimport { nanoid } from \"nanoid\";\nimport Todo from './components/Todo';\nimport Form from './components/Form';\nimport FilterButton from './components/FilterButton';\n\nconst FILTER_MAP = {\n  All: () => true,\n  Active: task => !task.completed,\n  Completed: task => task.completed\n};\n\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\n\nconst App = (props) => {\n  const [tasks, setTasks] = useState(props.tasks);\n  const [filter, setFilter] = useState('All')\n\n  const addTask = (name) => {\n    const newTask = { \n      id: \"todo-\" + nanoid(), \n      name: name, \n      completed: false \n    };\n    \n    setTasks([...tasks, newTask]);\n  }\n\n  const toggleTaskCompleted = (id)=> {\n    // change the completed property of only the task that was toggled\n    const updatedTasks = tasks.map(task => {\n      return id === task.id \n            ? {...task, completed: !task.completed}\n            : task \n    })\n\n    setTasks(updatedTasks);\n  }\n\n  const deleteTask = (id) => {\n    const remainingTasks = tasks.filter(task => id !== task.id)\n\n    setTasks(remainingTasks);\n  }\n\n  const editTask = (id, newName) => {\n    const editedTasks = tasks.map(task => {\n      return id === task.id\n            ? {...task, name: newName}\n            : task;\n    })\n    setTasks(editedTasks);\n  }\n\n  /** {...task} short handed for <Todo id={task.id} name={task.name} completed={task.completed} /> */\n  const taskList = tasks\n    .filter(FILTER_MAP[filter])\n    .map(task => (\n      <Todo \n        {...task} \n        key={task.id} \n        toggleTaskCompleted={toggleTaskCompleted}\n        deleteTask={deleteTask}\n        editTask={editTask}\n      />\n  ))\n\n  const filterList = FILTER_NAMES.map(name => (\n    <FilterButton \n      key={name} \n      name={name}\n      isPressed={name === filter}\n      setFilter={setFilter}\n    />\n  ))\n  \n  return (\n    <React.StrictMode>\n      <div className=\"todoapp stack-large\">\n        <h1>TodoMatic</h1>\n        <Form addTask={addTask}/>\n\n        <div className=\"filters btn-group stack-exception\">\n          {filterList}\n        </div>\n        \n        <h2 id=\"list-heading\">\n          { `${taskList.length} tasks remaining` }\n        </h2>\n\n        <ul\n          role=\"list\"\n          className=\"todo-list stack-large stack-exception\"\n          aria-labelledby=\"list-heading\"\n        >\n          {taskList}\n        </ul>\n      </div>\n    </React.StrictMode>\n  );\n};\n\nexport default App;",["28","29"],"/Users/Used/Documents/Practice-Projects/todo-_rts/src/components/Todo.js",[],"/Users/Used/Documents/Practice-Projects/todo-_rts/src/components/Form.js",[],"/Users/Used/Documents/Practice-Projects/todo-_rts/src/components/FilterButton.js",[],{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":91,"column":9,"nodeType":"36","endLine":95,"endColumn":10},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},"no-native-reassign",["37"],"no-negated-in-lhs",["38"],"jsx-a11y/no-redundant-roles","The element ul has an implicit role of list. Defining this explicitly is redundant and should be avoided.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]